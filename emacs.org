#+TITLE: Emacs Configuration
#+AUTHOR: Yauheni Kuzmianok
#+EMAIL: nixorg@gmail.com
#+OPTIONS: toc:nil num:nil

* General
** Intro
Here is my modal Emacs configuration that has been inspired by Xah Lee

[[./img/editor.png]]

** Configure package management

#+BEGIN_SRC emacs-lisp

(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/")   t)
(package-initialize)

(eval-and-compile
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t))
(server-start)
#+END_SRC

** Settings
#+BEGIN_SRC emacs-lisp

(custom-set-variables
 '(scroll-bar-mode nil)
 '(tool-bar-mode nil)
 '(tooltip-mode nil) ; relegate tooltips to echo area only
 '(menu-bar-mode nil)
 '(delete-selection-mode t)
 '(visible-bell t)
 '(ring-bell-function 'ignore)
 '(inhibit-startup-screen t)
 '(mac-command-modifier 'control)
 '(icicle-ido-like-mode nil)
 '(icicle-mode nil)
 '(make-backup-files nil)
 '(auto-save-default nil)
 '(backup-by-copying t)
 '(bookmark-save-flag 1)
 '(case-fold-search t)
 '(scroll-conservatively 100)
 '(show-paren-mode t)
 '(truncate-lines t)
 '(global-hl-line-mode t)
 '(winner-mode t)
 '(which-key-mode t)
 '(powerline-image-apple-rgb t)
 '(large-file-warning-threshold 100000000)
 '(ns-pop-up-frames nil)
)

(defalias 'yes-or-no-p 'y-or-n-p)
(prefer-coding-system 'utf-8)
(put 'narrow-to-region 'disabled nil)

(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize))
#+END_SRC
** Defuns

#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (defmacro save-column (&rest body)
    `(let ((column (current-column)))
       (unwind-protect
           (progn ,@body)
	 (move-to-column column))))
  (put 'save-column 'lisp-indent-function 0)

  (defun move-line-up ()
    (interactive)
    (save-column
      (transpose-lines 1)
      (forward-line -2)))

  (defun move-line-down ()
    (interactive)
    (save-column
      (forward-line 1)
      (transpose-lines 1)
      (forward-line -1)))

  (defun replace-char (arg)
    (interactive
     (list
      (read-char-exclusive)))
    (delete-char 1)
    (insert arg))

  (defun xah-display-minor-mode-key-priority  ()
    "Print out minor mode's key priority.
      URL `http://ergoemacs.org/emacs/minor_mode_key_priority.html'
      Version 2017-01-27"
    (interactive)
    (mapc
     (lambda (x) (prin1 (car x)) (terpri))
     minor-mode-map-alist))

  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
	(prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))


  (defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer t t))

  (defun my-new-line-and-indent ()
    (interactive)
    (move-end-of-line 1)
    (newline-and-indent))

  (defun my-new-line-and-indent-above ()
    (interactive)
    (beginning-of-line)
    (open-line 1)
    (indent-according-to-mode))


  (defun custom-eval-single ()
    (interactive)
    (if (or
	 (string-equal major-mode "xah-elisp-mode")
	 (string-equal major-mode "emacs-lisp-mode")
	 (string-equal major-mode "lisp-mode")
	 (string-equal major-mode "lisp-interaction-mode")
	 (string-equal major-mode "common-lisp-mode")
	 (string-equal major-mode "xah-clojure-mode")
	 (string-equal major-mode "scheme-mode"))
	(eval-defun nil)
      (if (or (eq major-mode 'js2-mode)
              (eq major-mode 'html-mode)
              (eq major-mode 'css-mode))
          (skewer-html-eval-tag))
      (if (string-equal major-mode "clojure-mode")
          (cider-eval-sexp-at-point)) 
      (if (eq major-mode 'python-mode)
          (elpy-shell-send-region-or-buffer))))

  (defun custom-eval-double ()
    (interactive)
    (if (or
	 (string-equal major-mode "xah-elisp-mode")
	 (string-equal major-mode "emacs-lisp-mode")
	 (string-equal major-mode "lisp-mode")
	 (string-equal major-mode "lisp-interaction-mode")
	 (string-equal major-mode "common-lisp-mode")
	 (string-equal major-mode "clojure-mode")
	 (string-equal major-mode "xah-clojure-mode")
	 (string-equal major-mode "scheme-mode"))
	(eval-region (region-beginning) (region-end) t)
      (if (eq major-mode 'js2-mode)
          (skewer-eval-last-expression))
      (if (eq major-mode 'python-mode)
          (elpy-shell-send-current-statement))))

  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank)
    )

  (defun kde-open-in-terminal ()
    (interactive)
    (cond
     ((string-equal system-type "windows-nt")
      (message "Microsoft Windows not supported. File a bug report or pull request."))
     ((string-equal system-type "darwin")
      (let ((process-connection-type nil))
	(shell-command (concat "open -a "
			       (shell-quote-argument "/Applications/iTerm.app")
			       " "
			       (shell-quote-argument (file-truename default-directory))))))
     ((string-equal system-type "gnu/linux")
      (let ((process-connection-type nil))
	(start-process "" nil "x-terminal-emulator"
                       (concat "--working-directory=" default-directory))))))
  (defun run-marta ()
    (interactive)
    (shell-command "marta ."))

  (defun run-iterm-here ()
    (interactive)
    (shell-command "open . -a iterm"))
  
  (defun gen-bookmark-str()
    (interactive)
    (string-join (mapcar (lambda (elem)
			   (concat (car elem) ":" (cdr (assoc 'filename (cdr elem))))
			   ) bookmark-alist) ";"))
  )
#+END_SRC   

** Minibuffer
#+begin_src emacs-lisp
(eval-and-compile
  (defun my/paste-in-minibuffer ()
    (local-set-key (kbd "M-k") 'yank)
    (local-set-key (kbd "C-v") 'yank)
    (local-set-key (kbd "C-a") 'mark-whole-buffer))
  (add-hook 'minibuffer-setup-hook 'my/paste-in-minibuffer))
#+end_src
** Window manipulation
   #+BEGIN_SRC emacs-lisp
   (use-package buffer-move
     :after xah-fly-keys
     :defer t
     :ensure t)
   (use-package ace-window
     :defer t
     :ensure t)

   (use-package switch-window
     :ensure t)

#+END_SRC

* UI
** Theme
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :ensure t
  :config
  (setq solarized-use-variable-pitch nil)
  (setq solarized-height-plus-1 1.0)
  (setq solarized-height-plus-2 1.0)
  (setq solarized-height-plus-3 1.0)
  (setq solarized-height-plus-4 1.0)
  (setq solarized-high-contrast-mode-line t)
  (load-theme 'solarized-dark t))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :defer t
  :ensure t
  :config
  (progn
    (require 'spaceline-config)
    ;; (spaceline-emacs-theme)
    (spaceline-helm-mode)
    ;; (setq powerline-default-separator 'wave)
    (spaceline-compile)
    ))

(use-package powerline
  :after all-the-icons
  :defer t
  :ensure t
  :config
  (setq powerline-default-separator 'slant))

(setq-default mode-line-format
	      '(
                (:eval
                 (let* ((active (powerline-selected-window-active))
                        (mode-line-buffer-id (if active 'mode-line-buffer-id-inactive 'mode-line-buffer-id))
                        (mode-line (if active 'mode-line-inactive 'mode-line))
                        (face1 (if active 'powerline-inactive2 'powerline-active1))
                        (face2 (if active 'powerline-inactive1 'powerline-active2))
                        (face-bold1 (if active 'powerline-inactive-bold-2 'powerline-active-bold-1))
                        (face-bold2 (if active 'powerline-inactive-bold-1 'powerline-active-bold-2))
                        (separator-left (intern (format "powerline-%s-%s"
                                                        (powerline-current-separator)
                                                        (car powerline-default-separator-dir))))
                        (separator-right (intern (format "powerline-%s-%s"
                                                         (powerline-current-separator)
                                                         (cdr powerline-default-separator-dir))))
                        (ths (list
			      (powerline-raw " test" 'face1 'r)
			      ))
                        (lhs (list
			      (powerline-raw (xah-get-current-mode-str) face-bold1 'l)
			      (powerline-raw "%*  " face1 'l)
			      (mode-icon face1)
			      (powerline-buffer-id face-bold1 'l)
			      (powerline-raw " " face1 'l)
			      (powerline-narrow face1 'l)
			      (powerline-raw (custom-modeline-icon-vc face1) face1 'l)))
                        (rhs (list (powerline-raw global-mode-string face1 'r)
                                   (custom-modeline-region-info face1)
                                   (powerline-raw "%4l" face1 'r)
                                   (powerline-raw ":" face1)
                                   (powerline-raw "%3c" face1 'r)
                                   (funcall separator-right face1 mode-line)
                                   (powerline-raw " " mode-line)
                                   (powerline-raw "%6p" mode-line 'r)
                                   (powerline-buffer-size face1 'l)
                                   (powerline-hud face2 face1)))
                        (center (list (powerline-raw " " face1)
				      (funcall separator-left face1 face2)
				      (when (and (boundp 'erc-track-minor-mode) erc-track-minor-mode)
                                        (powerline-raw erc-modified-channels-object face2 'l))
				      (powerline-major-mode face2 'l)
				      (powerline-process face2)
				      (powerline-raw " :" face2)
				      (powerline-minor-modes face2 'l)
				      (powerline-raw " " face2)
				      (funcall separator-right face2 face1))))
                   (concat
                    (powerline-render lhs)
                                        ;   (powerline-render ths)
                    (powerline-fill-center face1 (/ (powerline-width center) 2.0))
                    (powerline-render center)
                    (powerline-fill face1 (powerline-width rhs))
                    (powerline-render rhs)
                    )))))

(face-spec-set
 'mode-line
 '((t
    :box (:line-width 1 :color "#002b36" :style unspecified)
    :overline "#002b36"
    )))

(defface powerline-active-bold-1
  '((t
     :weight bold
     :inherit powerline-active1
     ))
  "face"
  :group 'powerline)

(defface powerline-active-bold-2
  '((t
     :weight bold
     :inherit powerline-active2
     ))
  "face"
  :group 'powerline)

(defface powerline-inactive-bold-1
  '((t
     :weight bold
     :inherit powerline-inactive1
     ))
  "face"
  :group 'powerline)

(defface powerline-inactive-bold-2
  '((t
     :weight bold
     :inherit powerline-inactive2
     ))
  "face"
  :group 'powerline)

(defface my-xah-info
  '(( t
      :foreground "#839496"
      :background "#0e5994"
      :weight bold
      ))
  "Face for global variables."
  :group 'my-lang-mode )

(eval-and-compile
  (defun mode-icon (face-value)
    (let ((family (all-the-icons-icon-family-for-buffer))
          (icon   (all-the-icons-icon-for-buffer)))
      (if (not (symbolp icon))
          ;; (propertize (symbol-name icon)
          ;; 'face `(:height 0.8 :inherit ,face-value)
          ;; 'display '(raise 0.1))
          (propertize icon
                      'face `(:height 1.1 :family ,family :inherit ,face-value)
                      'display '(raise 0.0)
                      ))))

  (defun custom-modeline-region-info (face)
    (when mark-active
      (let ((words (count-lines (region-beginning) (region-end)))
            (chars (count-words (region-end) (region-beginning))))
	(concat
	 (propertize (format "   %s" (all-the-icons-octicon "pencil") words chars)
                     'face `(:family ,(all-the-icons-octicon-family) :inherit ,face)
                     'display '(raise -0.0))
	 (propertize (format " (%s, %s)" words chars)
                     'face `(:height 0.9 :inherit ,face))))))

  (defun -custom-modeline-github-vc (face)
    (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
      (concat
       (propertize (format " %s" (all-the-icons-alltheicon "git" :height 1.0 :v-adjust 0.1 :face face))
                   'display '(raise 0.1))
       (propertize " • ")
       (propertize (format "%s" (all-the-icons-octicon "git-branch" :face face))
                   'display '(raise 0.1))
       (propertize (format " %s  " branch)
                   'display '(raise 0.1) 'face `(:inherit ,face)))))

  (defun custom-modeline-icon-vc (face)
    (when vc-mode
      (cond
       ((string-match "Git[:-]" vc-mode) (-custom-modeline-github-vc face))
       (t (format "%s" vc-mode)))))

  (defun xah-get-current-mode-str ()
    (if xah-fly-insert-state-q "INSERT  " "COMMAND ")))
#+END_SRC

* Keys
** Xah-fly-keys
*** Init configuration
#+begin_src emacs-lisp
(use-package xah-fly-keys
  :load-path "config"
  :config
  (xah-fly-keys 1)
  (add-hook 'minibuffer-setup-hook 
            (lambda () 
              (xah-fly-keys 0)))
  (define-key xah-fly-key-map (kbd "C-M-c") 'buf-move-up)
  (define-key xah-fly-key-map (kbd "C-M-t") 'buf-move-down)
  (define-key xah-fly-key-map (kbd "C-M-h") 'buf-move-left)
  (define-key xah-fly-key-map (kbd "C-M-n") 'buf-move-right)
  )

(eval-and-compile

  (defun my-keys-have-priority (_file)
    "Try to ensure that my keybindings retain priority over other minor modes.
Called via the `after-load-functions' special hook."
    (unless (eq (caar minor-mode-map-alist) 'xah-fly-keys)
      (let ((mykeys (assq 'xah-fly-keys minor-mode-map-alist)))
	(assq-delete-all 'xah-fly-keys minor-mode-map-alist)
	(add-to-list 'minor-mode-map-alist mykeys))))

  (add-hook 'after-load-functions 'my-keys-have-priority))
#+end_src
    
*** Custom Xah keys

#+begin_src emacs-lisp
(define-key xah-fly--tab-key-map (kbd "x") 'indent-xml)
(define-key xah-fly-e-keymap (kbd "k") 'paste-xml)
(define-key xah-fly-leader-key-map (kbd "u") 'helm-mini)

(define-key xah-fly-key-map (kbd "C-r") 'nil)
(define-key xah-fly-key-map (kbd "C-r") 'helm-projectile-find-file)
(define-key xah-fly-key-map (kbd "C-o") 'helm-find-files)
(define-key xah-fly-key-map (kbd "C-k") 'yank)
(define-key xah-fly-key-map (kbd "C-y") 'company-complete)

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(defun quit-command()
  (interactive)
  (if xah-fly-insert-state-q
      (xah-fly-command-mode-activate)
    (if multiple-cursors-mode
        (if (use-region-p)
	    (deactivate-mark))
      (keyboard-quit))
    ))

(define-key xah-fly-key-map (kbd "<escape>") 'quit-command)
#+end_src

*** Custom keymaps
**** Org
#+BEGIN_SRC emacs-lisp
(xah-fly--define-keys
 (define-prefix-command 'kde-org-keymap)
 '(
   ("s" . org-agenda)
   ("a" . org-archive-subtree)
   ("r" . org-refile)
   ("t" . org-toggle-checkbox)
   ("n" . org-add-note)
   ("p" . org-set-property)
   ))
#+END_SRC
**** Magit
#+BEGIN_SRC emacs-lisp
(xah-fly--define-keys
 (define-prefix-command 'kde-git-keymap)
 '(
   ("s" . magit-status)
   ("r" . magit-refresh)
   ("c" . magit-commit)
   ("p" . magit-push)
   ))
#+END_SRC
** Key configuration

#+begin_src emacs-lisp
(global-set-key (kbd "C-0") 'text-scale-increase)
(global-set-key (kbd "C-9") 'text-scale-decrease)

(define-key isearch-mode-map (kbd "<left>") 'isearch-ring-retreat )
(define-key isearch-mode-map (kbd "<right>") 'isearch-ring-advance )

(define-key isearch-mode-map (kbd "<up>") 'isearch-repeat-backward)
(define-key isearch-mode-map (kbd "<down>") 'isearch-repeat-forward)

(define-key minibuffer-local-isearch-map (kbd "<left>") 'isearch-reverse-exit-minibuffer)
(define-key minibuffer-local-isearch-map (kbd "<right>") 'isearch-forward-exit-minibuffer)
(global-set-key (kbd "C-c e") 'eval-and-replace)

(global-set-key (kbd "C-d") 'duplicate-line)
(global-set-key (kbd "C-l") 'goto-line)

(global-set-key (kbd "C-S-p") 'helm-projectile)
(global-set-key (kbd "C-S-f") 'helm-projectile-ag)
#+end_src

* Packages
** nlinum

#+begin_src emacs-lisp
(use-package nlinum
  :defer t
  :ensure t
  :config
  (progn
    (setq nlinum-format " %3d ")
    ;; (add-hook 'prog-mode-hook 'nlinum-mode)
    ;; (add-hook 'text-mode-hook 'nlinum-mode)
    ))
#+end_src
** delight

#+begin_src emacs-lisp
(use-package delight
  :ensure t
  :demand t)
#+end_src
** undo-tree

#+begin_src emacs-lisp
(use-package undo-tree
  :defer t
  :ensure t
  :config
  (global-undo-tree-mode 1))
#+end_src
** helm
#+begin_src emacs-lisp
(use-package helm
  :defer t
  :ensure t
  :config
  (helm-mode)
  (setq helm-split-window-in-side-p t)
  ;(setq helm-move-to-line-cycle-in-source t)
  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 40)
  (helm-autoresize-mode 1)
  :bind (("C-f" . helm-occur)
         :map helm-map
         ("M-c" . helm-previous-line)
         ("M-t" . helm-next-line)
         :map xah-fly-key-map
         ("C-r" . helm-find-files)))
  
(use-package helm-descbinds
  :ensure t
  :config (helm-descbinds-mode))

(use-package helm-describe-modes
  :ensure t
  :config (global-set-key [remap describe-mode] #'helm-describe-modes))

#+end_src
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer t
  :ensure t
  :config)
#+END_SRC
** multy cursors

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :init
  (setq mc/always-run-for-all t)
  (setq mc/cmds-to-run-once '())
  (global-set-key (kbd "C-8") 'mc/mark-all-like-this)
  (global-set-key (kbd "M-8") 'vr/mc-mark)
  ;; :config
  ;; (define-key mc/keymap (kbd "<escape>") 'mc/keyboard-quit)
)
#+END_SRC
** company

#+BEGIN_SRC emacs-lisp
(use-package company
  :defer t
  :config
  (progn
    (with-eval-after-load 'company
      ;; (company-quickhelp-mode)
      ;; (setq company-quickhelp-delay 1.0)
      (define-key company-active-map (kbd "M-b") nil)
      (define-key company-active-map (kbd "M-l") nil)
      (define-key company-active-map (kbd "C-o") nil)
      (define-key company-active-map (kbd "M-t") #'company-select-next)
      (define-key company-active-map (kbd "M-c") #'company-select-previous)
      (define-key company-active-map (kbd "M-f") #'company-search-candidates))
    (global-set-key (kbd "C-y") 'company-complete)
    (add-hook 'after-init-hook 'global-company-mode)
    ))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :defer t)
#+END_SRC
** help-fns
#+BEGIN_SRC emacs-lisp
(use-package help-fns+
  :ensure t
  :disabled)
#+END_SRC
** smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :defer t
  :ensure t
  :config
  (add-hook 'python-mode-hook #'smartparens-mode)
  (add-hook 'typescript-mode-hook #'smartparens-mode)
  (add-hook 'org-mode-hook #'smartparens-mode))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :ensure t
  :bind (:map magit-file-section-map
              ("u" . nil)
              ("a" . nil)))
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :defer t
  :ensure t
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1)
  (define-key yas-keymap (kbd "C-d") 'yas-skip-and-clear-or-delete-char)
)
#+END_SRC
** diff
#+BEGIN_SRC emacs-lisp
(defmacro csetq (variable value)
  `(funcall (or (get ',variable 'custom-set)
                'set-default)
            ',variable ,value))

(csetq ediff-window-setup-function 'ediff-setup-windows-plain)
(csetq ediff-split-window-function 'split-window-horizontally)
(csetq ediff-diff-options "-w")

(defun ora-ediff-hook ()
  (ediff-setup-keymap)
  (define-key ediff-mode-map "t" 'ediff-next-difference)
  (define-key ediff-mode-map "c" 'ediff-previous-difference))

(add-hook 'ediff-mode-hook 'ora-ediff-hook)
(add-hook 'ediff-after-quit-hook-internal 'winner-undo)
#+END_SRC
** regexp
#+BEGIN_SRC emacs-lisp
(require 're-builder)
(setq reb-re-syntax 'string)

(use-package visual-regexp
  :defer t
  :ensure t)
(use-package visual-regexp-steroids
  :defer t
  :ensure t
  :config
  (setq vr/engine 'pcre2el))
(use-package pcre2el
  :defer t
  :ensure t)
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
(defmacro diminish-major-mode (mode-hook abbrev)
  `(add-hook ,mode-hook
             (lambda () (setq mode-name ,abbrev))))

(use-package diminish
  :demand t
  :ensure t
  :config
  (progn
    (diminish 'ivy-mode)
    (diminish 'which-key-mode)
    (diminish 'undo-tree-mode)
    (diminish 'xah-fly-keys "xah")
    (diminish 'all-the-icons-dired-mode)
    (diminish-major-mode 'emacs-lisp-mode-hook "ξλ")
    (diminish-major-mode 'lisp-interaction-mode-hook "λ")
    ))
#+END_SRC
** all-the-icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC
** dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :defer t
  :ensure nil
  :bind (:map dired-mode-map
         ("C-<return>" . xah-open-in-external-app)
         ("M-<return>" . kde-open-in-terminal)))

(use-package dired+
  :after dired
  :ensure t
  :config
  (setq ls-lisp-dirs-first t))

(use-package tramp-hdfs
  :defer t
  :ensure t)
(use-package all-the-icons-dired
  :after dired
  :defer t
  :ensure t
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC
** highlight-symbol
#+BEGIN_SRC emacs-lisp
(use-package auto-highlight-symbol
  :defer t
  :ensure t
  :config
  (global-auto-highlight-symbol-mode t))

(use-package highlight-symbol
  :defer t
  :ensure t)
#+END_SRC
** dict
#+BEGIN_SRC emacs-lisp
(use-package google-translate
  :defer t
  :ensure t
  :config
  (setq google-translate-default-source-language "en")
  (setq google-translate-default-target-language "ru"))

(use-package multitran
  :defer t
  :ensure t)

(defun multitran-custom ()
  (interactive)
  (multitran--word (thing-at-point 'word)))

(use-package thesaurus
  :defer t
  :ensure t
  :config
  (setq thesaurus-bhl-api-key "72dd7311ba167ef0ae7d2c1585959e6b")

  (defun thesaurus-fetch-synonyms (word)
    "fetch synonyms for the given word, from a remote source."
    (let ((synonym-list nil)
          (buf (thesaurus-get-buffer-for-word word)))
      (if buf
          (progn
            (with-current-buffer buf
              (rename-buffer (concat "*thesaurus* - " word) t)
              (goto-char (point-min))
              (thesaurus-process-http-headers)
              (while (not (= (point-min) (point-max)))
                (let ((elt (thesaurus-parse-one-line)))
                  (if elt
                      (add-to-list 'synonym-list elt)))))
            (kill-buffer buf)
            (nreverse synonym-list)
            )))))

#+END_SRC
** key-chord
#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :defer t
  :ensure t
  :config
  (key-chord-mode 1)
  (key-chord-define xah-fly-key-map "``" 'custom-eval-double))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp

(use-package flycheck
  :defer t
  :ensure t
  :config
  ;; (global-flycheck-mode)
)

#+END_SRC
** corral
#+BEGIN_SRC emacs-lisp
(use-package corral
  :defer t
  :ensure t)
#+END_SRC
** popwin
#+BEGIN_SRC emacs-lisp
(use-package popwin
  :defer t
  :ensure t
  :config
  (popwin-mode 1)
  (push "*multitran*" popwin:special-display-config))
#+END_SRC
** jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :defer t
  :ensure t)
#+END_SRC
** projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :defer t
  :ensure t
  :config
  (projectile-global-mode)
  (add-to-list 'projectile-globally-ignored-directories "node_modules"))

(xah-fly--define-keys
 (define-prefix-command 'kde-projectile-keymap)
 '(
   ("p" . helm-projectile)
   ("a" . helm-projectile-ag)
   ))

(use-package helm-projectile
  :defer t
  :ensure t)
#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+END_SRC
** editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+END_SRC
* Mode configuration
** lisp

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
#+end_src

*** paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :defer t
  :ensure t
  :diminish paredit-mode
  :init
  (add-hook 'lisp-mode-hook 'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
  :bind (:map paredit-mode-map
              (";" . nil)
              (":" . nil)
              ("C-d" . nil)
              ("M-;" . nil))
  :config
  (define-key paredit-mode-map (kbd "C-,") 'paredit-wrap-round)
  (define-key paredit-mode-map (kbd "C-<") 'paredit-forward-barf-sexp)
  (define-key paredit-mode-map (kbd "C->") 'paredit-forward-slurp-sexp)
  (define-key paredit-mode-map (kbd "C-p") 'paredit-raise-sexp)
  (define-key paredit-mode-map (kbd "C-S-r") 'paredit-forward)
  (define-key paredit-mode-map (kbd "C-S-g") 'paredit-backward)
  ;; (define-key paredit-mode-map (kbd "C-S-t") 'paredit-forward-up)
  ;; (define-key paredit-mode-map (kbd "C-S-c") 'paredit-backward-up)
  (define-key paredit-mode-map (kbd "C-<return>") 'paredit-close-new-line-custom)

  (defun paredit-close-new-line-custom ()
    (interactive)
    (paredit-close-round)
    (newline-and-indent)))
#+END_SRC
** xml

#+begin_src emacs-lisp

(with-eval-after-load 'nxml-mode
    (define-key nxml-mode-map (kbd "C-S-g") 'my-hs-hide-level)
    (define-key nxml-mode-map (kbd "C-S-r") 'my-hs-toggle-hiding)
    (define-key nxml-mode-map (kbd "C-0") 'hs-show-all))


(add-to-list 'hs-special-modes-alist
             '(nxml-mode
               "<!--\\|<[^/>]*[^/]>"
               "-->\\|</[^/>]*[^/]>"

               "<!--"
               sgml-skip-tag-forward
               nil))

(add-hook 'nxml-mode-hook 'hs-minor-mode)

(defun custom-folding ()
  (interactive)
  (save-excursion
    (end-of-line)
    (hs-toggle-hiding)))

(defun indent-xml()
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward "><" nil t)
    (replace-match ">\n<"))
  (nxml-mode)
  (indent-region (point-min) (point-max) nil)
  (goto-char (point-min)))
(global-set-key (kbd "M-<f12>") 'indent-xml)

(defun paste-xml ()
  (interactive)
  (large-file-mode)
  (xah-paste-or-paste-previous)
  (indent-xml))
#+end_src

*** Custom folding
    
#+begin_src emacs-lisp
  (define-fringe-bitmap 'hs-marker [0 24 24 126 126 24 24 0])
  (defcustom hs-fringe-face 'hs-fringe-face
    "*Specify face used to highlight the fringe on hidden regions."
    :type 'face
    :group 'hideshow)
  (defface hs-fringe-face
    '((t (:foreground "#888" :box (:line-width 2 :color "grey75" :style released-button))))
    "Face used to highlight the fringe on folded regions"
    :group 'hideshow)
  (defcustom hs-face 'hs-face
    "*Specify the face to to use for the hidden region indicator."
    :type 'face
    :group 'hideshow)
  (defface hs-face
    '((t (:background "#93a1a1" :foreground "#002b36" :box t)))
    "Face to hightlight the ... area of hidden regions"
    :group 'hideshow)
  (defun display-code-line-counts (ov)
    (when (eq 'code (overlay-get ov 'hs))
      (let* ((marker-string "*fringe-dummy*")
             (marker-length (length marker-string))
             (display-string (format "(%d)..." (count-lines (overlay-start ov) (overlay-end ov))))
             )
        ;; On hover over the overlay display the hidden text.
        (overlay-put ov 'help-echo (buffer-substring (overlay-start ov)
                                                     (overlay-end ov)))
        (put-text-property 0 marker-length 'display (list 'left-fringe 'hs-marker 'hs-fringe-face) marker-string)
        (overlay-put ov 'before-string marker-string)
        (put-text-property 0 (length display-string) 'face 'hs-face display-string)
        (overlay-put ov 'display display-string)
        )))

  (setq hs-set-up-overlay 'display-code-line-counts)
#+end_src

*** Custom hiding

#+begin_src emacs-lisp
  (defun my-hs-toggle-hiding (arg)
    (interactive "p")
    (save-excursion (hs-toggle-hiding)))

  (defun my-hs-hide-level (arg)
    (interactive "p")
    (hs-hide-level 1))
#+end_src
** large mode

#+BEGIN_SRC emacs-lisp
;; Large file performance improvement
(setq line-number-display-limit large-file-warning-threshold)
(setq line-number-display-limit-width 200)

(defun my--is-file-large ()
  "If buffer too large and my cause performance issue."
  (< large-file-warning-threshold (buffer-size)))

(define-derived-mode large-file-mode fundamental-mode "LargeFile"
  "Fixes performance issues in Emacs for large files."
  ;; (setq buffer-read-only t)
  (setq bidi-display-reordering nil)
  (jit-lock-mode nil)
  ;; (buffer-disable-undo)
  (set (make-variable-buffer-local 'global-hl-line-mode) nil)
  (set (make-variable-buffer-local 'line-number-mode) nil)
  (set (make-variable-buffer-local 'column-number-mode) nil))

(add-to-list 'magic-mode-alist (cons #'my--is-file-large #'large-file-mode))

(defadvice xah-paste-or-paste-previous (before large-file-paste activate)
  (large-file-paste))

(defun large-file-paste ()
  (interactive)
  (let (text len)
    (setq text (car kill-ring))
    (setq len (length text))
    (message "length %d" len)
    (if (> len 10000)
        (large-file-mode))))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :defer t
  :config
  (progn
    (elpy-enable)
    ;; (setq Exec-path (append exec-path '("c:/Program Files (x86)/Python3/Scripts")))
    ;;(setq Exec-path (append exec-path '("c:/Users/Yauheni_Kuzmianok/.virtualenv/Scripts")))
    ;;(pyvenv-activate "~/.virtualenv")
    ;;(elpy-use-ipython)
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "--simple-prompt -i")
    ;; (setenv "PYTHONIOENCODING" "UTF-8")
    (setq elpy-rpc-backend "jedi")
    (setq elpy-rpc-python-command "python3")
    ;; (setq elpy-rpc-py "jedi")
    (setq jedi:complete-on-dot t)
    ;; (setq jedi:setup-keys t)
    ))

(use-package realgud
  :defer t)

(require 'cl)

(use-package ein
  :defer t
  :config
  (progn
    (require 'websocket)
    ;; Use Jedi with EIN
    (add-hook 'ein:connect-mode-hook 'ein:jedi-setup)
    (setq ein:default-url-or-port "http://localhost:8888"
          ein:output-type-preference '(emacs-lisp svg png jpeg
                                                  html text latex javascript))
    )
  )

(use-package virtualenvwrapper
  :defer t
  :config
  (venv-initialize-interactive-shells)
  (venv-initialize-eshell)
  (setq venv-location "~/.virtualenv/"))

(defun prelude-personal-python-mode-defaults ()
  "Personal defaults for Python programming."
  ;; Enable elpy mode
  (elpy-mode)
  (smartparens-mode)
  ;; Jedi backend
  ;; (jedi:setup)
  ;; (setq jedi:complete-on-dot t) ;optional
  ;; (auto-complete-mode)
  ;; (jedi:ac-setup)
  ;; (setq elpy-rpc-python-command "python3")
  ;; (python-shell-interpreter "ipython3")
  )

(setq prelude-personal-python-mode-hook 'prelude-personal-python-mode-defaults)

(add-hook 'python-mode-hook (lambda ()
                                        ;(electric-pair-mode 1)
                              (run-hooks 'prelude-personal-python-mode-hook)))


(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(use-package ob-ipython
  :defer t
  :ensure t
  :config
  (setq org-confirm-babel-evaluate nil)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  (setq org-startup-with-inline-images t))
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :mode ("\\.txt\\'" . org-mode)
  :init
  (add-hook 'org-mode-hook
	    (lambda ()
	      (progn
		(org-bullets-mode t)
		(define-key org-mode-map (kbd "M-H") 'org-metaleft)
		(define-key org-mode-map (kbd "M-N") 'org-metaright))))    

  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((lisp . t)
     (python . t)
     (shell . t)))
  
  (setq org-src-tab-acts-natively t)
  (setq org-agenda-files '("~/Dropbox/org"))
  (setq org-log-done 'time)
  (setq org-src-fontify-natively t)
  (setq org-edit-src-content-indentation 0)
  (setq org-ellipsis " ↴")
  (setq org-refile-targets
	'(("Personal.org" :maxlevel . 1)
          ("Work.org" :maxlevel . 1)))
  
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  (org-add-link-type "karabiner" 'open-pdf-from-library
                     (lambda (path desc format)
                       (format "[%s](%s:%s)" desc "karabiner" path)))
  (setq org-capture-templates
	'(("t" "Todo" entry (file "~/Dropbox/org/Inbox.org")
           "* TODO %?\n  %i\n  %a")
	  ("n" "Note" entry (file "~/Dropbox/org/Inbox.org")
           "* %?\n  %i\n"))))

(defun make-orgcapture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "remember") (width . 80) (height . 16)
                (top . 400) (left . 300)
                ))
  (select-frame-by-name "remember")
  (org-capture))

(use-package ox-hugo
  :defer t
  :after ox)
#+END_SRC
** web

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :defer t
  :ensure t
  :config
  (add-hook 'web-mode-hook 'smartparens-mode)
  (sp-with-modes '(web-mode)
    (sp-local-pair "{% "  " %}")
    (sp-local-pair "<p> "  " </p>")
    (sp-local-pair "{% "  " %}")
    (sp-local-pair "{{ "  " }}")
    (sp-local-tag "%" "<% "  " %>")
    (sp-local-tag "=" "<%= " " %>")
    (sp-local-tag "#" "<%# " " %>")))

(use-package emmet-mode
  :defer t
  :ensure t
  :config
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'html-mode-hook 'emmet-mode))

(use-package rainbow-mode
  :defer t
  :ensure t
  :config
  (add-hook 'html-mode-hook 'rainbow-mode)
  (add-hook 'css-mode-hook 'rainbow-mode))
#+END_SRC

** js

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :defer t
  :ensure t
  :mode ("\\.js\\'" . js2-mode)
  :hook ((js2-mode . tern-mode)
	 (js2-mode . company-mode)
	 ))

(use-package tern
  :ensure t)

(use-package company-tern
  :ensure t
  :config
  (add-to-list 'company-backends 'company-tern))

;; (defun setup-tide-mode ()
;;   (interactive)
;;   (tide-setup)
;;   (flycheck-mode +1)
;;   (setq flycheck-check-syntax-automatically '(save mode-enabled))
;;   (eldoc-mode +1)
;;   (tide-hl-identifier-mode +1)
;;   ;; company is an optional dependency. You have to
;;   ;; install it separately via package-install
;;   ;; `M-x package-install [ret] company`
;;   (company-mode +1))

;; (use-package tide
;;   :defer t
;;   :ensure t)

;; formats the buffer before saving
;; (add-hook 'before-save-hook 'tide-format-before-save)
;; (add-hook 'typescript-mode-hook #'setup-tide-mode)

(use-package skewer-mode
  :defer t
  :ensure t
  :config
  (add-hook 'html-mode-hook 'skewer-html-mode)
  (add-hook 'js2-mode 'skewer-mode)
  (add-hook 'css-mode 'skewer-mode)
  (define-key html-mode-map (kbd "C-c C-c") 'skewer-html-eval-tag))
#+END_SRC
   
** dired
#+BEGIN_SRC emacs-lisp
(setq insert-directory-program "gls")
(setq dired-use-ls-dired t)
(setq dired-listing-switches "-al --group-directories-first")
#+END_SRC 
** clojure
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :defer t
  :hook ((clojure-mode . cider-mode)
	 (clojure-mode . enable-paredit-mode)))
(use-package cider
  :defer t
  :hook ((cider-mode . company-mode)
         (cider-repl-mode . company-mode)))
#+END_SRC
